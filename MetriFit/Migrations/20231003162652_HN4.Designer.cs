// <auto-generated />
using System;
using MetriFit;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetriFit.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231003162652_HN4")]
    partial class HN4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MetriFit.CaloriesConsumedPerMeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CarbonhydrateCalories")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 3, 18, 26, 52, 336, DateTimeKind.Local).AddTicks(6911));

                    b.Property<double?>("FatCalories")
                        .HasColumnType("float");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ProtienCalories")
                        .HasColumnType("float");

                    b.Property<double?>("SugarCalories")
                        .HasColumnType("float");

                    b.Property<double?>("TotalCaloriesConsumed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CaloriesConsumedPerMeal");
                });

            modelBuilder.Entity("MetriFit.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CaloriesBurned")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 3, 16, 26, 52, 337, DateTimeKind.Utc).AddTicks(8772));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("MetriFit.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CaloriesPerDayToBeEaten")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateExAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 17, 16, 26, 52, 337, DateTimeKind.Utc).AddTicks(8239));

                    b.Property<DateTime>("DateStartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 3, 16, 26, 52, 337, DateTimeKind.Utc).AddTicks(8002));

                    b.Property<string>("GoalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("MetriFit.MealLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaloriesConsumedPerMealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CarbonhydrateConsumed")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Local));

                    b.Property<double>("FatConsumed")
                        .HasColumnType("float");

                    b.Property<string>("MealLogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ProtienConsumed")
                        .HasColumnType("float");

                    b.Property<double>("RepastGrams")
                        .HasColumnType("float");

                    b.Property<double>("Sugar")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaloriesConsumedPerMealId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("MealLog");
                });

            modelBuilder.Entity("MetriFit.NutritionInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carbonhydrate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<string>("MealPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Protien")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("NutritionInformation");
                });

            modelBuilder.Entity("MetriFit.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("MetriFit.SupportAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportAgent");
                });

            modelBuilder.Entity("MetriFit.TotalCaloriesPerDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalCalories")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TotalCaloriesPerDay");
                });

            modelBuilder.Entity("MetriFit.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BasalMetabolicRate")
                        .HasColumnType("float");

                    b.Property<double?>("BmrafterActivityLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BodyFat")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[LastName] + ', ' + [FirstName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<double>("Height")
                        .HasMaxLength(4)
                        .HasColumnType("float");

                    b.Property<double?>("HipCircumference")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastMeasurmentsEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("LeanerBodyMass")
                        .HasColumnType("float");

                    b.Property<double>("NeckCircumference")
                        .HasColumnType("float");

                    b.Property<Guid?>("NutritionInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("User");

                    b.Property<double>("WaistCircumference")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasMaxLength(4)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NutritionInformationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MetriFit.UsersNutritions", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NutritionInfortmationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "NutritionInfortmationId");

                    b.HasIndex("NutritionInfortmationId");

                    b.ToTable("UsersNutritions");
                });

            modelBuilder.Entity("MetriFit.Exercise", b =>
                {
                    b.HasOne("MetriFit.User", "User")
                        .WithMany("Exercise")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetriFit.Goal", b =>
                {
                    b.HasOne("MetriFit.User", "User")
                        .WithOne("Goal")
                        .HasForeignKey("MetriFit.Goal", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetriFit.MealLog", b =>
                {
                    b.HasOne("MetriFit.CaloriesConsumedPerMeal", "CaloriesConsumedPerMeal")
                        .WithOne("Meal")
                        .HasForeignKey("MetriFit.MealLog", "CaloriesConsumedPerMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetriFit.User", "User")
                        .WithMany("MealLog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaloriesConsumedPerMeal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetriFit.RefreshToken", b =>
                {
                    b.HasOne("MetriFit.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("MetriFit.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetriFit.TotalCaloriesPerDay", b =>
                {
                    b.HasOne("MetriFit.User", "User")
                        .WithMany("TotalCal")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetriFit.User", b =>
                {
                    b.HasOne("MetriFit.NutritionInformation", null)
                        .WithMany("User")
                        .HasForeignKey("NutritionInformationId");
                });

            modelBuilder.Entity("MetriFit.UsersNutritions", b =>
                {
                    b.HasOne("MetriFit.NutritionInformation", "NutritionInformation")
                        .WithMany("UserNutritions")
                        .HasForeignKey("NutritionInfortmationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetriFit.User", "Users")
                        .WithMany("UsersNutritions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionInformation");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MetriFit.CaloriesConsumedPerMeal", b =>
                {
                    b.Navigation("Meal");
                });

            modelBuilder.Entity("MetriFit.NutritionInformation", b =>
                {
                    b.Navigation("User");

                    b.Navigation("UserNutritions");
                });

            modelBuilder.Entity("MetriFit.User", b =>
                {
                    b.Navigation("Exercise");

                    b.Navigation("Goal");

                    b.Navigation("MealLog");

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("TotalCal");

                    b.Navigation("UsersNutritions");
                });
#pragma warning restore 612, 618
        }
    }
}
